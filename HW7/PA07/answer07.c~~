#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "answer07.h"
char * * explode(const char * str, const char * delims, int * arrLen);


BusinessNode * create_node(char * stars, char * name, char * address)
{
  BusinessNode * head = NULL;
  head = malloc(sizeof(BusinessNode));
  head->name = name;
  head->stars = stars;
  head->left = NULL;
  head->right = NULL;
  
  return head;
}

BusinessNode * tree_insert(BusinessNode * node, BusinessNode * root)
{
  BusinessNode * head = NULL;
  
  if(root == NULL)
  {
    return node;
  }
  
  if(strcmp(root->name, node->name) > 0 || strcmp(root->name, node->name) == 0)
  {
    root =  tree_insert(node, root->left);
  }
  else if(strcmp(root->name, node->name) < 0)
  {
    root =  tree_insert(node, root->right);
  }
  
  return root;
}


BusinessNode * load_tree_from_file(char * filename)
{
  BusinessNode * node = NULL;
  FILE * fp = fopen(filename, "r");
  char alph;
  int count = 0;
  char * currLine;
  int posn = 0;
  char ** explodedLine;
  int x; //not used
  BusinessNode * node;
  BusinessNode * root = NULL;
  
  if(fp == NULL)
  {
    return NULL;
  }
  
  while(!feof(fp))
  {
   alph = fgetc(fp);
   
   if(alph != EOF && alph != '\n')
   {
     currLine[posn] = alph;
     posn++;
   }
   else if(alph!= EOF && alph == '\n')
   {
     currLine[posn] = '\0';   
     explodedLine = explode(currLine, "\t", &x);
     node = create_node(explodedLine[0], explodedLine[1], explodedLine[2]);
     root = tree_insert(node, root);
     
     free(explodedLine);
     
   }
  }
  
  fclose(fp);
  
  return root;
}
   
   
   

BusinessNode * tree_search_name(char * name, BusinessNode * root)
{
 if (root == NULL)
 {
   return NULL;
 }
 
 if(strcmp(root->name, name) == 0)
 {
   return root;
 }
 else if(strcmp(root->name, name) > 0)
 {
   return tree_search_name(name, root->left);
 }
 else if(strcmp(root->name, name) < 0)
 {
   return tree_search_name(name, root->right);
 }
 
 return root;
}


void destroy_tree(BusinessNode * root)
{
  if(root != NULL)
  {
    destroy_tree(root->left);
    destroy_tree(root->right);
    free(root->name);
    free(root->address);
    free(root->stars);
    free(root);
  }
}




char * * explode(const char * str, const char * delims, int * arrLen)
{
int  count = 0;
int delim_count = 0;
int x = 0;
char * temp = malloc(sizeof(char*) * strlen(str));
int delimPosn = 0;
char * temp2;
int ansCount = 0;

while (count < strlen(str)){
    if(strchr(delims, str[count]) != NULL){
    delim_count++;
    }
count++;
}

char * * strArr = malloc((delim_count+1) * sizeof(char *));
strcpy(temp, str);

while(temp[x] != '\0'){

    if(strchr(delims, temp[x]) != NULL){

    temp2 = malloc(sizeof(char*) * (x - (delimPosn) ));
    memcpy(temp2, str, (x - (delimPosn)));

    strArr[ansCount] = temp2;

    ansCount++;
    str += x - delimPosn;
    delimPosn = x;
    }

x++;
}

temp2 = malloc(sizeof(char*) * (x - delimPosn + 1));
memcpy(temp2, str, x - delimPosn + 1);

strArr[ansCount] = temp2;

*arrLen = delim_count + 1;
free(temp);
free(temp2);
return strArr;
}


  
  

  
  


